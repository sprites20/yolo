# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'hub.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

import argparse
import os
import sys
from pathlib import Path
import cv2 as cv

import torch


class Ui_MainWindow(object):
    
    opt = None
    
    num_stop = 1 
    output_folder = 'output/'
    vid_writer = None

    openfile_name_model = None
    vid_name = None
    img_name = None
    cap_statue = None
    save_dir = None
    img_over = None

    timer = QtCore.QTimer()
    #timer.timeout.connect(show_video)
    #        Button_open_cam.clicked.connect(video_button)
    cap_video = 0
    flag = 0
    img = []
            
    def init_slots(self):
        self.button_load_model.clicked.connect(self.load_model)

        self.button_load_image.clicked.connect(self.open_img)
        self.button_load_video.clicked.connect(self.open_vid)
        self.button_load_camera.clicked.connect(self.open_cam)
        self.button_detect.clicked.connect(self.detect)
        self.button_stop.clicked.connect(self.stop)
        # self.ui.pushButton_9.clicked.connect(self.save_ss)
        # self.timer_video.timeout.connect(self.show_video_frame)

        self.button_load_image.setDisabled(True)
        self.button_load_video.setDisabled(True)
        self.button_load_camera.setDisabled(True)
        self.button_detect.setDisabled(True)
        self.button_stop.setDisabled(True)
        
        pass
    def open_img(self):
        # try except
        try:
            # self.img_name 选择图片路径
            self.img_name, _ = QtWidgets.QFileDialog.getOpenFileName(None, "Select Image", "data/images", "*.jpg ; *.png ; All Files(*)")
        except OSError as reason:
            print(str(reason))
        
        pass
    def open_vid(self):
        pass
    def open_cam(self):
        pass
    def detect(self):
        pass
    def stop(self):
        pass
    def load_model(self):
        try:
            self.openfile_name_model, some = QtWidgets.QFileDialog.getOpenFileName(None, 'yolov5.pt', 'weights', "*.pt")
        except OSError as reason:
            print(str(reason))
        else:
            if self.openfile_name_model:
                print(self.openfile_name_model)
                model = torch.hub.load('ultralytics/yolov5', 'custom', path=self.openfile_name_model, force_reload=True) 
                # Images
                #img = "C:\\Users\\NakaMura\\Desktop\\Screenshot 2022-11-27 223302.jpg"  # or file, Path, PIL, OpenCV, numpy, list

                # Inference
                #results = model(img)

                # Results
                #results.save()  # or .show(), .save(), .crop(), .pandas(), etc.
                
                #QtWidgets.QMessageBox.warning(self, u"Ok!", u"loading complete！", buttons=QtWidgets.QMessageBox.Ok, defaultButton=QtWidgets.QMessageBox.Ok)
                self.output_box.append("Model loading complete!")
                self.button_load_image.setDisabled(False)
                self.button_load_video.setDisabled(False)
                self.button_load_camera.setDisabled(False)
            else:
                #QtWidgets.QMessageBox.warning(self, u"Warning", u"无权重文件，请先选择权重文件，否则会发生未知错误。", buttons=QtWidgets.QMessageBox.Ok, defaultButton=QtWidgets.QMessageBox.Ok)
                self.output_box.append("Warning!")
        # self.model_init(self,  **self.openfile_name_model )
    
    def initialize(self):
        self.init_slots()
    
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(903, 431)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.button_load_model = QtWidgets.QPushButton(self.centralwidget)
        self.button_load_model.setGeometry(QtCore.QRect(10, 50, 131, 31))
        self.button_load_model.setObjectName("button_load_model")
        self.button_load_image = QtWidgets.QPushButton(self.centralwidget)
        self.button_load_image.setGeometry(QtCore.QRect(10, 90, 131, 31))
        self.button_load_image.setObjectName("button_load_image")
        self.button_load_video = QtWidgets.QPushButton(self.centralwidget)
        self.button_load_video.setGeometry(QtCore.QRect(10, 130, 131, 31))
        self.button_load_video.setObjectName("button_load_video")
        self.button_load_camera = QtWidgets.QPushButton(self.centralwidget)
        self.button_load_camera.setGeometry(QtCore.QRect(10, 170, 131, 31))
        self.button_load_camera.setObjectName("button_load_camera")
        self.button_detect = QtWidgets.QPushButton(self.centralwidget)
        self.button_detect.setGeometry(QtCore.QRect(10, 210, 131, 31))
        self.button_detect.setObjectName("button_detect")
        self.output_box = QtWidgets.QTextEdit(self.centralwidget)
        self.output_box.setGeometry(QtCore.QRect(10, 290, 131, 121))
        self.output_box.setObjectName("output_box")
        self.image_box_1 = QtWidgets.QLabel(self.centralwidget)
        self.image_box_1.setGeometry(QtCore.QRect(160, 50, 361, 361))
        self.image_box_1.setFrameShape(QtWidgets.QFrame.Box)
        self.image_box_1.setText("")
        self.image_box_1.setObjectName("image_box_1")
        self.iamge_box_2 = QtWidgets.QLabel(self.centralwidget)
        self.iamge_box_2.setGeometry(QtCore.QRect(530, 50, 361, 361))
        self.iamge_box_2.setFrameShape(QtWidgets.QFrame.Box)
        self.iamge_box_2.setText("")
        self.iamge_box_2.setObjectName("iamge_box_2")
        self.image_label_1 = QtWidgets.QLabel(self.centralwidget)
        self.image_label_1.setGeometry(QtCore.QRect(260, 20, 131, 21))
        self.image_label_1.setAlignment(QtCore.Qt.AlignCenter)
        self.image_label_1.setObjectName("image_label_1")
        self.image_label_2 = QtWidgets.QLabel(self.centralwidget)
        self.image_label_2.setGeometry(QtCore.QRect(650, 20, 131, 21))
        self.image_label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.image_label_2.setObjectName("image_label_2")
        self.button_stop = QtWidgets.QPushButton(self.centralwidget)
        self.button_stop.setGeometry(QtCore.QRect(10, 250, 131, 31))
        self.button_stop.setObjectName("button_stop")
        MainWindow.setCentralWidget(self.centralwidget)
        
        self.initialize()
        
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.button_load_model.setText(_translate("MainWindow", "Load Model"))
        self.button_load_image.setText(_translate("MainWindow", "Load Image"))
        self.button_load_video.setText(_translate("MainWindow", "Load Video"))
        self.button_load_camera.setText(_translate("MainWindow", "Load Camera"))
        self.button_detect.setText(_translate("MainWindow", "Detect"))
        self.image_label_1.setText(_translate("MainWindow", "Image 1"))
        self.image_label_2.setText(_translate("MainWindow", "Image 2"))
        self.button_stop.setText(_translate("MainWindow", "Stop"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
